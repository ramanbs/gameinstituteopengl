Steps for drawing triangle in OpenGL

1. Create a buffer in GPU memory for the mesh
2. Fill the buffer with mesh data (vertices) - vertex has some attributes, e.g. : position, color, texture coordinate etc
3. Create shaders for knowing (GPU) how to draw your mesh
4. Define vertex format for the mesh vertices 
5. Draw the mesh
   a) Set the shader as current.
   b) Set the buffer as current
   c) Draw the buffer


Stages for pipeline : 

Stage 							|					Input				| Output

1. Vertex Shader (Programmable)			|		Raw Vertices (From CPU) | Transformed Vertices  
2. Primitive Assembly & Rasterizer		|		Transformed Vertices	| Fragments
3. Fragment Shader(Programmable)		| 		Fragments				| Processed Fragments
4. Tests & Blending						| 		Processed Fragments		| Pixels


Vertex Shader : Changes the 3d coordinates into a different 3d coordinate space (normalized device coordinates)
Rasterization : takes primitive and coverts them into blocks of fragment for the fragment shader to assign color to them

the triangle coordinates we are gonna draw is : (-0.5, -0.5), (0.5, -0.5), (0, 0.5) considering the 
boundaries to be : (0, 1), (-1, 0), (1, 0) and (0, -1)
center would be : (0, 0)
z component - 0
Coordinate Space used above is the one  given out by the vertex shader

Vertex Buffer Object - OpenGL Object - generic place in memeory to hold data, so wen sedn the array of vertices to this buffer in GPU, so as to minimize the traffic of sending the data from CPU to GPU

//GL_STATIC_DRAW - create once, setup once use it a lot, GL_DYNAMIC_DRAW - create once, change a lot and use it a lot, GL_STREAM_DRAW - create once, setup once and use once
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); 

For core openGL we need to create VertexArrayObject - holds info for our buffer so that when we draw we need not refer buffer object but VAO instead. MOst meshes object holds a collections of one or more VBO which holds vertext point, vertex normal, texture coords. Older OpenGL needs to bind each data buffer and define memory layout every time you need to draw. VAO collects various info like pointer to VBO and only VAO can be binded and used before we draw something instead of providing everything every time we need to draw something (old way of doing it)

Steps for creating shader : 

1. Create vertex shader.
2. Create fragment shader.
3. Compile the shaders.
4. Create a shader program.
5. Attach the shaders to the program.
6. Link the compiled shaders into a single Program.
7. Use the program.

Indexed Buffer vs Normal Vertex Buffer : 

1. Index Buffer provides the index of the vertex to be drawn ( just like in Unity we provide vertices array and an index array)
2. Index Buffer prevents re-draw of vertices.

GLSL Shader Data types

Scalar : 
float, double, int, uint and bool

Vectors : 
vec2, vec3, vec4
ivec2, ivec3, .. for all scalar corresponding types

Square Matrices: 

mat2, mat3, mat4,
dmat2, dmat3, dmat4

Non Square matrices : 
mat{2x3, 4}x{2,3,4}
dmat{2x3, 4}x{2,3,4}

Uniform variables are available to the shaders through the CPU and they are global to all the shaders in the program. 
Value of uniform remains constant for a draw call, unline vertex and fragment where they change for each vertext or fragment.